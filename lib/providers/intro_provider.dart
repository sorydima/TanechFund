import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart'; // Added to fix IconData errors

// Intro Screen Model (Renamed to AppIntroScreen to avoid conflict with widget)
class AppIntroScreen { // Renamed from IntroScreen
  final String id;
  final String title;
  final String description;
  final String imageUrl;
  final IconData icon;
  final List<String> features;
  final bool isRequired;
  final int order;

  AppIntroScreen({ // Renamed constructor
    required this.id,
    required this.title,
    required this.description,
    required this.imageUrl,
    required this.icon,
    required this.features,
    required this.isRequired,
    required this.order,
  });

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'title': title,
      'description': description,
      'imageUrl': imageUrl,
      'icon': icon.codePoint,
      'features': features,
      'isRequired': isRequired,
      'order': order,
    };
  }

  factory AppIntroScreen.fromJson(Map<String, dynamic> json) { // Renamed factory
    return AppIntroScreen( // Renamed
      id: json['id'],
      title: json['title'],
      description: json['description'],
      imageUrl: json['imageUrl'],
      icon: IconData(json['icon'], fontFamily: 'MaterialIcons'),
      features: List<String>.from(json['features']),
      isRequired: json['isRequired'],
      order: json['order'],
    );
  }
}

// Feature Category
class FeatureCategory {
  final String id;
  final String name;
  final String description;
  final IconData icon;
  final List<String> features;
  final int order;

  FeatureCategory({
    required this.id,
    required this.name,
    required this.description,
    required this.icon,
    required this.features,
    required this.order,
  });
}

// Navigation Guide
class NavigationGuide {
  final String id;
  final String title;
  final String description;
  final String tip;
  final IconData icon;
  final int order;

  NavigationGuide({
    required this.id,
    required this.title,
    required this.description,
    required this.tip,
    required this.icon,
    required this.order,
  });
}

// Intro Provider
class IntroProvider extends ChangeNotifier {
  List<AppIntroScreen> _introScreens = [];
  List<FeatureCategory> _featureCategories = [];
  List<NavigationGuide> _navigationGuides = [];
  bool _isIntroCompleted = false;
  int _currentIntroIndex = 0;

  // Getters
  List<AppIntroScreen> get introScreens => _introScreens;
  List<FeatureCategory> get featureCategories => _featureCategories;
  List<NavigationGuide> get navigationGuides => _navigationGuides;
  bool get isIntroCompleted => _isIntroCompleted;
  int get currentIntroIndex => _currentIntroIndex;

  // Initialize
  Future<void> initialize() async {
    await _loadData();
    if (_introScreens.isEmpty) {
      _createIntroData();
    }
  }

  // Load data from SharedPreferences
  Future<void> _loadData() async {
    final prefs = await SharedPreferences.getInstance();
    
    final introCompleted = prefs.getBool('intro_completed') ?? false;
    _isIntroCompleted = introCompleted;

    final currentIndex = prefs.getInt('current_intro_index') ?? 0;
    _currentIntroIndex = currentIndex;

    notifyListeners();
  }

  // Save data to SharedPreferences
  Future<void> _saveData() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('intro_completed', _isIntroCompleted);
    await prefs.setInt('current_intro_index', _currentIntroIndex);
  }

  // Create intro data
  void _createIntroData() {
    // Intro Screens
    _introScreens = [
      AppIntroScreen(
        id: 'welcome',
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ REChain¬ÆÔ∏è VC Lab',
        description: '–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–Ω—á—É—Ä–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –∏–Ω–∫—É–±–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ä—Ç–∞–ø-—Å—Ç—É–¥–∏–∏',
        imageUrl: 'https://via.placeholder.com/300x200/4CAF50/FFFFFF?text=Welcome',
        icon: Icons.rocket_launch,
        features: [
          '–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–Ω—á—É—Ä–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
          '–ò–Ω–∫—É–±–∞—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
          '–°—Ç–∞—Ä—Ç–∞–ø-—Å—Ç—É–¥–∏—è',
          '–ú–æ–¥–µ–ª—å —Å–∏–Ω–¥–∏–∫–∞—Ç–∞',
          '–ë–ª–æ–∫—á–µ–π–Ω-—Ä–µ—à–µ–Ω–∏—è',
          '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ',
          '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ',
        ],
        isRequired: true,
        order: 1,
      ),
      AppIntroScreen(
        id: 'navigation',
        title: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é',
        description: '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
        imageUrl: 'https://via.placeholder.com/300x200/2196F3/FFFFFF?text=Navigation',
        icon: Icons.navigation,
        features: [
          '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–∫–ª–∞–¥–æ–∫',
          '26 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤',
          '–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º',
          '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏',
          '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞',
        ],
        isRequired: true,
        order: 2,
      ),
      AppIntroScreen(
        id: 'core_features',
        title: '–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
        description: '–ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏',
        imageUrl: 'https://via.placeholder.com/300x200/FF9800/FFFFFF?text=Features',
        icon: Icons.star,
        features: [
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
          '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—É–Ω–¥—ã',
          '–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –∏ –æ–±—É—á–µ–Ω–∏–µ',
          '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
          '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å',
          '–•–∞–∫–∞—Ç–æ–Ω—ã –∏ —á–µ–ª–ª–µ–Ω–¥–∂–∏',
        ],
        isRequired: true,
        order: 3,
      ),
      AppIntroScreen(
        id: 'web3_features',
        title: 'Web3 & DeFi —Ñ—É–Ω–∫—Ü–∏–∏',
        description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
        imageUrl: 'https://via.placeholder.com/300x200/9C27B0/FFFFFF?text=Web3',
        icon: Icons.block,
        features: [
          'NFT Marketplace',
          'DeFi –ø—Ä–æ—Ç–æ–∫–æ–ª—ã',
          'Cross-chain –º–æ—Å—Ç—ã',
          'Hardware –∫–æ—à–µ–ª—å–∫–∏',
          'DEX —Ç–æ—Ä–≥–æ–≤–ª—è',
          'Yield Farming',
          'DAO —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        ],
        isRequired: false,
        order: 4,
      ),
      AppIntroScreen(
        id: 'advanced_features',
        title: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
        description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π',
        imageUrl: 'https://via.placeholder.com/300x200/F44336/FFFFFF?text=Advanced',
        icon: Icons.psychology,
        features: [
          'AI/ML –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
          '–ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è',
          'Web3 Identity',
          'Gaming & Play-to-Earn',
          '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
          '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ',
        ],
        isRequired: false,
        order: 5,
      ),
    ];

    // Feature Categories
    _featureCategories = [
      FeatureCategory(
        id: 'core',
        name: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
        description: '–ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
        icon: Icons.home,
        features: [
          '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
          '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤',
          '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—É–Ω–¥—ã',
          '–ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ',
          '–û–±—É—á–µ–Ω–∏–µ',
          '–•–∞–∫–∞—Ç–æ–Ω—ã',
          '–ß–µ–ª–ª–µ–Ω–¥–∂–∏',
        ],
        order: 1,
      ),
      FeatureCategory(
        id: 'analytics',
        name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
        description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
        icon: Icons.analytics,
        features: [
          '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤',
          '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å',
          '–ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è',
          'AI/ML –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
        ],
        order: 2,
      ),
      FeatureCategory(
        id: 'blockchain',
        name: '–ë–ª–æ–∫—á–µ–π–Ω –∏ DeFi',
        description: 'Web3 —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã',
        icon: Icons.block,
        features: [
          '–ë–ª–æ–∫—á–µ–π–Ω DeFi',
          'NFT Marketplace',
          'Cross-chain –º–æ—Å—Ç—ã',
          'Hardware –∫–æ—à–µ–ª—å–∫–∏',
          'DEX —Ç–æ—Ä–≥–æ–≤–ª—è',
          'Yield Farming',
          'DAO —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        ],
        order: 3,
      ),
      FeatureCategory(
        id: 'specialized',
        name: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
        description: '–û—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –Ω–∏—à–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
        icon: Icons.psychology,
        features: [
          'Web3 Identity',
          'Gaming & Play-to-Earn',
          '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
          '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ',
        ],
        order: 4,
      ),
    ];

    // Navigation Guides
    _navigationGuides = [
      NavigationGuide(
        id: 'horizontal_scroll',
        title: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞',
        description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏',
        tip: 'üí° –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–π—Ç–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ä–∞–∑–¥–µ–ª–∞–º',
        icon: Icons.swap_horiz,
        order: 1,
      ),
      NavigationGuide(
        id: 'tab_indicator',
        title: '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∫–ª–∞–¥–æ–∫',
        description: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π —Å –ø–æ–º–æ—â—å—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤–Ω–∏–∑—É',
        tip: 'üí° –¢–æ—á–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤ (26)',
        icon: Icons.more_horiz,
        order: 2,
      ),
      NavigationGuide(
        id: 'auto_scroll',
        title: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞',
        description: '–ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–µ–π',
        tip: 'üí° –í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ',
        icon: Icons.center_focus_strong,
        order: 3,
      ),
      NavigationGuide(
        id: 'quick_access',
        title: '–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø',
        description: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        tip: 'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞–≤–∞—é—â—É—é –∫–Ω–æ–ø–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞',
        icon: Icons.notifications,
        order: 4,
      ),
      NavigationGuide(
        id: 'search_function',
        title: '–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è',
        description: '–í–æ –º–Ω–æ–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è',
        tip: 'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
        icon: Icons.search,
        order: 5,
      ),
    ];

    notifyListeners();
  }

  // Intro Management
  void nextIntro() {
    if (_currentIntroIndex < _introScreens.length - 1) {
      _currentIntroIndex++;
      _saveData();
      notifyListeners();
    }
  }

  void previousIntro() {
    if (_currentIntroIndex > 0) {
      _currentIntroIndex--;
      _saveData();
      notifyListeners();
    }
  }

  void goToIntro(int index) {
    if (index >= 0 && index < _introScreens.length) {
      _currentIntroIndex = index;
      _saveData();
      notifyListeners();
    }
  }

  void completeIntro() {
    _isIntroCompleted = true;
    _saveData();
    notifyListeners();
  }

  void resetIntro() {
    _isIntroCompleted = false;
    _currentIntroIndex = 0;
    _saveData();
    notifyListeners();
  }

  // Get current intro screen
  AppIntroScreen? get currentIntroScreen {
    if (_currentIntroIndex >= 0 && _currentIntroIndex < _introScreens.length) {
      return _introScreens[_currentIntroIndex];
    }
    return null;
  }

  // Check if intro is at the beginning
  bool get isAtBeginning => _currentIntroIndex == 0;

  // Check if intro is at the end
  bool get isAtEnd => _currentIntroIndex == _introScreens.length - 1;

  // Get progress percentage
  double get progressPercentage {
    if (_introScreens.isEmpty) return 0.0;
    return (_currentIntroIndex + 1) / _introScreens.length;
  }

  // Get intro count
  int get totalIntroScreens => _introScreens.length;

  // Get required intro screens
  List<AppIntroScreen> get requiredIntroScreens {
    return _introScreens.where((screen) => screen.isRequired).toList();
  }

  // Get optional intro screens
  List<AppIntroScreen> get optionalIntroScreens {
    return _introScreens.where((screen) => !screen.isRequired).toList();
  }
}
