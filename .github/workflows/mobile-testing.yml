name: Mobile Platform Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to test (comma-separated: android,ios,all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - android
          - ios

jobs:
  android-testing:
    name: Android Testing Matrix
    runs-on: macos-latest
    if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'android' }}
    strategy:
      matrix:
        api_level: [29, 33, 34]
        device:
          - pixel_6
          - pixel_4
          - emulator-5554
        include:
          - api_level: 29
            device: pixel_6
            min_sdk: 21
            target_sdk: 29
            test_runner: integration_test
          - api_level: 33
            device: pixel_4
            min_sdk: 21
            target_sdk: 33
            test_runner: integration_test
          - api_level: 34
            device: emulator-5554
            min_sdk: 21
            target_sdk: 34
            test_runner: unit_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          sdk-version: '34.0.0'
          api-level: ${{ matrix.api_level }}
          arch: 'x86_64'
          install-location: 'sdk'

      - name: Accept Android licenses
        run: |
          echo "y" | sdkmanager --licenses
          flutter doctor --android-licenses

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Configure Android
        run: |
          # Update build.gradle for specific API level
          sed -i '' "s/minSdk.*/minSdk ${{ matrix.min_sdk }}/" android/app/build.gradle.kts
          sed -i '' "s/targetSdk.*/targetSdk ${{ matrix.target_sdk }}/" android/app/build.gradle.kts

      - name: Run Android Unit Tests
        if: matrix.test_runner == 'unit_test'
        run: |
          flutter test test/ --machine > android-unit-test-results.json
          # Parse test results
          if grep -q '"error"' android-unit-test-results.json; then
            echo "Android unit tests failed"
            exit 1
          fi

      - name: Run Android Integration Tests
        if: matrix.test_runner == 'integration_test'
        run: |
          # Start emulator
          flutter emulators --launch ${{ matrix.device }}
          # Wait for emulator to boot
          adb wait-for-device
          sleep 30
          
          # Run integration tests
          flutter drive \
            --driver=test_driver/integration_test.dart \
            --target=integration_test/app_test.dart \
            --device-id=${{ matrix.device }} \
            --dart-define=TESTING=true \
            --dart-define=DEVICE_ID=${{ matrix.device }} \
            --dart-define=API_LEVEL=${{ matrix.api_level }} \
            --no-publish-port \
            --flavor=integration
          
          # Stop emulator
          adb -s emulator-5554 emu kill

      - name: Run Android UI Tests
        if: matrix.test_runner == 'integration_test'
        run: |
          # UI testing with Espresso or custom automation
          flutter driver \
            --driver=test_driver/ui_test.dart \
            --target=test/integration_test/ui_test.dart \
            --device-id=${{ matrix.device }} \
            --dart-define=UI_TESTING=true \
            --no-publish-port

      - name: Android Performance Testing
        run: |
          # Run performance tests on device
          flutter drive \
            --driver=test_driver/perf_test.dart \
            --target=integration_test/perf_test.dart \
            --device-id=${{ matrix.device }} \
            --dart-define=PERF_TESTING=true \
            --no-publish-port \
            --profile
          
          # Generate performance report
          python scripts/analyze_android_perf.py perf_results.json

      - name: Android Accessibility Testing
        run: |
          # Run accessibility scanner
          flutter test test/accessibility/ --dart-define=ACCESSIBILITY_TESTING=true \
            --device-id=${{ matrix.device }}
          
          # Use Android accessibility tools
          adb shell settings put secure enabled_accessibility_services com.android.accessibility.AccessibilityTestService
          adb shell settings put secure accessibility_enabled 1
          
          # Test with TalkBack
          flutter drive \
            --driver=test_driver/talkback_test.dart \
            --target=integration_test/talkback_test.dart \
            --device-id=${{ matrix.device }} \
            --dart-define=TALKBACK_TESTING=true

      - name: Android Security Testing
        run: |
          # Run security tests
          flutter test test/security/ --dart-define=SECURITY_TESTING=true
          
          # Check for secure storage
          python scripts/android_security_check.py android/app/
          
          # Verify permissions
          python scripts/check_permissions.py android/app/src/main/AndroidManifest.xml

      - name: Generate Android Test Report
        if: always()
        run: |
          echo "# Android Testing Report" > android-test-report.md
          echo "## Device: ${{ matrix.device }}" >> android-test-report.md
          echo "## API Level: ${{ matrix.api_level }}" >> android-test-report.md
          echo "## Test Runner: ${{ matrix.test_runner }}" >> android-test-report.md
          
          # Include test results
          if [ -f test_results.json ]; then
            cat test_results.json | jq '{device: "${{ matrix.device }}", api_level: ${{ matrix.api_level }}, results: .}' >> android-test-report.md
          fi
          
          # Performance metrics
          if [ -f perf_results.json ]; then
            echo "### Performance Results" >> android-test-report.md
            jq '.' perf_results.json >> android-test-report.md
          fi

      - name: Upload Android Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-reports-${{ matrix.device }}-api${{ matrix.api_level }}
          path: |
            android-test-report.md
            test_results.json
            perf_results.json
            screenshots/
          retention-days: 30

      - name: Android Test Alert
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸ“± *Android Testing Failed*\nDevice: ${{ matrix.device }}\nAPI Level: ${{ matrix.api_level }}\nReview test reports for failures."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  ios-testing:
    name: iOS Testing Matrix
    runs-on: macos-latest
    if: ${{ github.event.inputs.platforms == 'all' || github.event.inputs.platforms == 'ios' }}
    strategy:
      matrix:
        ios_version: [15.0, 16.0, 17.0]
        device:
          - iPhone 14
          - iPad Air
          - iPhone SE (3rd generation)
        include:
          - ios_version: 15.0
            device: iPhone 14
            simulator: true
            test_runner: unit_test
          - ios_version: 16.0
            device: iPad Air
            simulator: true
            test_runner: integration_test
          - ios_version: 17.0
            device: iPhone SE (3rd generation)
            simulator: true
            test_runner: ui_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: |
          sudo xcode-select --switch /Applications/Xcode_${{ matrix.ios_version }}.app
          xcodebuild -version

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'

      - name: Install CocoaPods
        run: |
          # Install iOS dependencies
          cd ios && pod install && cd ..

      - name: Install iOS Simulator
        run: |
          # Install required iOS simulator
          xcrun simctl install_device "iOS${{ matrix.ios_version | replace('.', '') }}/${{ matrix.device }}" booted || true

      - name: Run iOS Unit Tests
        if: matrix.test_runner == 'unit_test'
        run: |
          flutter test test/ --dart-define=IOS_UNIT_TESTING=true \
            --dart-define=IOS_VERSION=${{ matrix.ios_version }} \
            --dart-define=DEVICE=${{ matrix.device }}

      - name: Run iOS Integration Tests
        if: matrix.test_runner == 'integration_test'
        run: |
          # Run integration tests on simulator
          flutter drive \
            --driver=test_driver/ios_integration_test.dart \
            --target=integration_test/app_test.dart \
            --device-id="iOS Simulator" \
            --dart-define=IOS_INTEGRATION_TESTING=true \
            --dart-define=IOS_VERSION=${{ matrix.ios_version }} \
            --no-publish-port \
            --flavor=integration
          
          # Run with specific device
          xcrun simctl list devices | grep "${{ matrix.device }}" | cut -d "(" -f2 | cut -d ")" -f1 | xargs -I DEVICE xcrun simctl boot DEVICE
          flutter drive \
            --driver=test_driver/ios_integration_test.dart \
            --target=integration_test/app_test.dart \
            --device-id="${{ matrix.device }}" \
            --dart-define=DEVICE_ID=${{ matrix.device }} \
            --dart-define=IOS_VERSION=${{ matrix.ios_version }} \
            --no-publish-port

      - name: Run iOS UI Tests
        if: matrix.test_runner == 'ui_test'
        run: |
          # UI testing with XCTest
          xcodebuild test \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -destination "platform=iOS Simulator,name=${{ matrix.device }},OS=${{ matrix.ios_version | replace('.', '') }}.0" \
            -sdk iphonesimulator${{ matrix.ios_version | replace('.', '') }} \
            -derivedDataPath ios/build \
            CODECOV_TOKEN=${{ secrets.CODECOV_TOKEN }} \
            TEST_DEVICE_IDENTIFIER="${{ matrix.device }}"
          
          # Flutter driver UI tests
          flutter drive \
            --driver=test_driver/ios_ui_test.dart \
            --target=test/integration_test/ui_test.dart \
            --device-id="${{ matrix.device }}" \
            --dart-define=UI_TESTING=true \
            --dart-define=IOS_VERSION=${{ matrix.ios_version }} \
            --no-publish-port

      - name: iOS Performance Testing
        run: |
          # Run performance tests on iOS simulator
          flutter drive \
            --driver=test_driver/ios_perf_test.dart \
            --target=integration_test/perf_test.dart \
            --device-id="${{ matrix.device }}" \
            --dart-define=PERF_TESTING=true \
            --dart-define=IOS_VERSION=${{ matrix.ios_version }} \
            --no-publish-port \
            --profile
          
          # iOS-specific performance metrics
          xcrun xctrace list categories
          xcrun xctrace run \
            --template "Time Profiler" \
            --device "${{ matrix.device }}" \
            --output-dir perf-output \
            --launchApp "Runner"

      - name: iOS Accessibility Testing
        run: |
          # Run accessibility tests
          flutter test test/accessibility/ --dart-define=IOS_ACCESSIBILITY_TESTING=true \
            --dart-define=IOS_VERSION=${{ matrix.ios_version }} \
            --dart-define=DEVICE=${{ matrix.device }}
          
          # Test with VoiceOver
          xcrun simctl accessibility "${{ matrix.device }}" enabled true
          flutter drive \
            --driver=test_driver/voiceover_test.dart \
            --target=integration_test/voiceover_test.dart \
            --device-id="${{ matrix.device }}" \
            --dart-define=VOICEOVER_TESTING=true

      - name: iOS Security Testing
        run: |
          # Run iOS security tests
          flutter test test/security/ --dart-define=IOS_SECURITY_TESTING=true
          
          # Check iOS bundle for security issues
          python scripts/ios_security_check.py ios/Runner/
          
          # Verify App Transport Security
          python scripts/check_ats.py ios/Runner/Info.plist
          
          # Test keychain integration
          flutter test test/keychain_test.dart --dart-define=KEYCHAIN_TESTING=true

      - name: Generate iOS Test Report
        if: always()
        run: |
          echo "# iOS Testing Report" > ios-test-report.md
          echo "## Device: ${{ matrix.device }}" >> ios-test-report.md
          echo "## iOS Version: ${{ matrix.ios_version }}" >> ios-test-report.md
          echo "## Test Runner: ${{ matrix.test_runner }}" >> ios-test-report.md
          
          # Include test results
          if [ -f test_results.json ]; then
            cat test_results.json | jq '{device: "${{ matrix.device }}", ios_version: "${{ matrix.ios_version }}", results: .}' >> ios-test-report.md
          fi
          
          # Performance metrics
          if [ -f perf_results.json ]; then
            echo "### Performance Results" >> ios-test-report.md
            jq '.' perf_results.json >> ios-test-report.md
          fi

      - name: Upload iOS Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-reports-${{ matrix.device }}-ios${{ matrix.ios_version | replace('.', '') }}
          path: |
            ios-test-report.md
            test_results.json
            perf_results.json
            screenshots/
            ios/build/
          retention-days: 30

      - name: iOS Test Alert
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸ“± *iOS Testing Failed*\nDevice: ${{ matrix.device }}\niOS Version: ${{ matrix.ios_version }}\nReview test reports for failures."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cross-platform-testing:
    name: Cross-Platform Integration Testing
    runs-on: ubuntu-latest
    needs: [android-testing, ios-testing]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'

      - name: Run Cross-Platform Widget Tests
        run: |
          # Run widget tests with different platform configurations
          flutter test test/widget/ --dart-define=CROSS_PLATFORM_TESTING=true
          
          # Test platform-specific widgets
          flutter test test/platform_widgets_test.dart \
            --dart-define=PLATFORM=android \
            --dart-define=DEVICE=pixel_6
          flutter test test/platform_widgets_test.dart \
            --dart-define=PLATFORM=ios \
            --dart-define=DEVICE=iPhone_14

      - name: Run Device Feature Tests
        run: |
          # Test device-specific features
          flutter test test/device_features_test.dart \
            --dart-define=DEVICE_CAMERA=true \
            --dart-define=DEVICE_GPS=true \
            --dart-define=DEVICE_BIOMETRICS=true \
            --dart-define=DEVICE_NETWORK=true

      - name: Run End-to-End Tests
        run: |
          # E2E testing across platforms
          flutter test test/e2e/ --dart-define=E2E_TESTING=true \
            --dart-define=API_BASE_URL=http://test-api.rechain.vc \
            --dart-define=WEBSOCKET_URL=ws://test-ws.rechain.vc \
            --dart-define=BLOCKCHAIN_RPC_URL=http://test-rpc.rechain.vc

      - name: Test App Launch Performance
        run: |
          # Measure app startup time across platforms
          python scripts/measure_startup.py \
            --platform=android \
            --device=pixel_6 \
            --output=startup-android.json
          python scripts/measure_startup.py \
            --platform=ios \
            --device=iPhone_14 \
            --output=startup-ios.json
          python scripts/measure_startup.py \
            --platform=web \
            --device=chrome \
            --output=startup-web.json

      - name: Cross-Platform Compliance Testing
        run: |
          # Test platform compliance
          flutter test test/compliance/ --dart-define=COMPLIANCE_TESTING=true
          
          # GDPR/CCPA compliance checks
          python scripts/gdpr_compliance.py assets/ lib/
          
          # App store compliance
          python scripts/app_store_check.py ios/ android/

      - name: Generate Cross-Platform Report
        run: |
          echo "# Cross-Platform Testing Report" > cross-platform-report.md
          echo "## Android Results" >> cross-platform-report.md
          cat android-test-report.md >> cross-platform-report.md if [ -f android-test-report.md ]; then
            cat android-test-report.md >> cross-platform-report.md
          fi
          
          echo "## iOS Results" >> cross-platform-report.md
          if [ -f ios-test-report.md ]; then
            cat ios-test-report.md >> cross-platform-report.md
          fi
          
          echo "## Cross-Platform Integration" >> cross-platform-report.md
          echo "- Widget tests: $(flutter test test/widget/ --dry-run | grep -c 'OK')"
          echo "- E2E tests: $(flutter test test/e2e/ --dry-run | grep -c 'OK')"
          echo "- Compliance checks: $(python scripts/check_compliance.py | grep -c 'PASS')"

      - name: Upload Cross-Platform Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cross-platform-test-reports
          path: |
            cross-platform-report.md
            startup-*.json
            test_results.json
          retention-days: 30

      - name: Cross-Platform Alert
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸ“± *Cross-Platform Testing Failed*\nReview integration and device-specific test results for failures across Android and iOS."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  mobile-summary:
    name: Mobile Testing Summary
    runs-on: ubuntu-latest
    needs: [android-testing, ios-testing, cross-platform-testing]
    if: always()
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: all-reports/

      - name: Generate Summary Report
        run: |
          echo "# Mobile Platform Testing Summary" > mobile-testing-summary.md
          echo "## Overall Status" >> mobile-testing-summary.md
          
          # Aggregate Android results
          ANDROID_FAILURES=$(find all-reports/ -name "*android*" -type f | xargs grep -c "FAILED\|error" 2>/dev/null || true)
          echo "### Android: $ANDROID_FAILURES failures" >> mobile-testing-summary.md
          
          # Aggregate iOS results
          IOS_FAILURES=$(find all-reports/ -name "*ios*" -type f | xargs grep -c "FAILED\|error" 2>/dev/null || true)
          echo "### iOS: $IOS_FAILURES failures" >> mobile-testing-summary.md
          
          # Cross-platform results
          CROSS_FAILURES=$(find all-reports/ -name "*cross-platform*" -type f | xargs grep -c "FAILED\|error" 2>/dev/null || true)
          echo "### Cross-Platform: $CROSS_FAILURES failures" >> mobile-testing-summary.md
          
          # Overall status
          TOTAL_FAILURES=$((ANDROID_FAILURES + IOS_FAILURES + CROSS_FAILURES))
          if [ "$TOTAL_FAILURES" -gt 0 ]; then
            echo "## ðŸš¨ MOBILE TESTING REGRESSIONS DETECTED" >> mobile-testing-summary.md
            echo "Found $TOTAL_FAILURES failing tests across platforms." >> mobile-testing-summary.md
            exit 1
          else
            echo "## âœ… All Mobile Tests Passed" >> mobile-testing-summary.md
            echo "All mobile platform tests passed successfully." >> mobile-testing-summary.md
          fi

      - name: Upload Summary Report
        uses: actions/upload-artifact@v4
        with:
          name: mobile-testing-summary-report
          path: mobile-testing-summary.md
          retention-days: 90

      - name: Mobile Testing Success Notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "ðŸ“± *Mobile Platform Testing PASSED*\n\nAll Android and iOS tests completed successfully across multiple devices and API levels.\n\nDetailed reports available in artifacts."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Mobile Testing Failure Notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸ“± *Mobile Platform Testing FAILED*\n\nFound $TOTAL_FAILURES failing tests across Android and iOS platforms.\n\nReview the summary report and individual platform reports in artifacts."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  device-farm-testing:
    name: Device Farm Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [aws_device_farm, browserstack, saucelabs]
        include:
          - service: aws_device_farm
            provider: aws
            devices:
              - "Samsung Galaxy S22"
              - "Google Pixel 7"
              - "iPhone 14 Pro"
              - "iPad Pro (12.9-inch)"
          - service: browserstack
            provider: browserstack
            devices:
              - "Samsung Galaxy S22"
              - "Google Pixel 7"
              - "iPhone 14 Pro"
              - "iPad Pro"
          - service: saucelabs
            provider: saucelabs
            devices:
              - "Samsung Galaxy S22"
              - "Google Pixel 7"
              - "iPhone 14 Pro"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'

      - name: Install dependencies
        run: flutter pub get

      - name: Build for Device Farm
        run: |
          # Build APK for Android
          flutter build apk --release --target-platform android-arm64
          
          # Build IPA for iOS (requires macOS runner for actual IPA, this is for simulator)
          flutter build ios --release --simulator
          
          # Build web for browser testing
          flutter build web --release --web-renderer html

      - name: Run Device Farm Tests
        run: |
          case "${{ matrix.service }}" in
            "aws_device_farm")
              python scripts/aws_device_farm.py \
                --access-key ${{ secrets.AWS_ACCESS_KEY_ID }} \
                --secret-key ${{ secrets.AWS_SECRET_ACCESS_KEY }} \
                --region us-west-2 \
                --project-name REChainVC \
                --device-pool-name Android-iOS-Pool \
                --app-arn arn:aws:s3:::your-bucket/app.apk \
                --test-spec test/android/device_farm_test_spec.yaml
              ;;
            "browserstack")
              python scripts/browserstack_test.py \
                --username ${{ secrets.BROWSERSTACK_USERNAME }} \
                --access-key ${{ secrets.BROWSERSTACK_ACCESS_KEY }} \
                --app-url https://your-storage.com/app.apk \
                --test-suite test/mobile/browserstack_suite.json
              ;;
            "saucelabs")
              python scripts/saucelabs_test.py \
                --username ${{ secrets.SAUCE_USERNAME }} \
                --access-key ${{ secrets.SAUCE_ACCESS_KEY }} \
                --platform android \
                --device-name "Samsung Galaxy S22" \
                --app-path build/app/outputs/flutter-apk/app-release.apk \
                --test-name "REChain VC Device Test"
              ;;
          esac

      - name: Parse Device Farm Results
        run: |
          # Parse test results from device farm
          python scripts/parse_device_farm_results.py \
            --service ${{ matrix.service }} \
            --output device-farm-report-${{ matrix.service }}.md
          
          # Check for failures
          if grep -q "FAILED" device-farm-report-${{ matrix.service }}.md; then
            echo "Device farm tests failed for ${{ matrix.service }}"
            exit 1
          fi

      - name: Upload Device Farm Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: device-farm-reports-${{ matrix.service }}
          path: |
            device-farm-report-${{ matrix.service }}.md
            device-farm-logs/
            screenshots/
          retention-days: 30

      - name: Device Farm Alert
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸ“± *Device Farm Testing Failed*\nService: ${{ matrix.service }}\nReview device-specific test results on real devices."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  compliance-check:
    name: Mobile Compliance Check
    runs-on: ubuntu-latest
    needs: [android-testing, ios-testing, cross-platform-testing]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run App Store Compliance Check
        run: |
          # Google Play Store compliance
          python scripts/google_play_compliance.py android/app/
          
          # Apple App Store compliance
          python scripts/apple_app_store_compliance.py ios/Runner/
          
          # GDPR compliance for mobile
          python scripts/gdpr_mobile_compliance.py lib/ assets/
          
          # Age rating and content compliance
          python scripts/content_compliance.py assets/ lib/

      - name: Generate Compliance Report
        run: |
          echo "# Mobile Compliance Report" > mobile-compliance-report.md
          echo "## App Store Compliance" >> mobile-compliance-report.md
          echo "### Google Play" >> mobile-compliance-report.md
          python scripts/generate_google_play_report.py >> mobile-compliance-report.md
          
          echo "### Apple App Store" >> mobile-compliance-report.md
          python scripts/generate_apple_report.py >> mobile-compliance-report.md
          
          echo "## Privacy Compliance" >> mobile-compliance-report.md
          python scripts/generate_privacy_report.py >> mobile-compliance-report.md

      - name: Upload Compliance Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-compliance-report
          path: mobile-compliance-report.md
          retention-days: 90

      - name: Compliance Alert
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸ“± *Mobile Compliance Issues Detected*\nReview App Store compliance and privacy policy requirements."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  mobile-summary:
    name: Mobile Testing Summary
    runs-on: ubuntu-latest
    needs: [android-testing, ios-testing, cross-platform-testing, device-farm-testing, compliance-check]
    if: always()
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: all-reports/

      - name: Generate Summary Report
        run: |
          echo "# Mobile Platform Testing Summary" > mobile-testing-summary.md
          echo "## Overall Status" >> mobile-testing-summary.md
          
          # Aggregate results
          ANDROID_FAILURES=$(find all-reports/ -name "*android*" -type f | xargs grep -c "FAILED\|error" 2>/dev/null || true)
          IOS_FAILURES=$(find all-reports/ -name "*ios*" -type f | xargs grep -c "FAILED\|error" 2>/dev/null || true)
          DEVICE_FARM_FAILURES=$(find all-reports/ -name "*device-farm*" -type f | xargs grep -c "FAILED" 2>/dev/null || true)
          COMPLIANCE_FAILURES=$(grep -c "FAILED\|VIOLATION" all-reports/mobile-compliance-report/mobile-compliance-report.md 2>/dev/null || true)
          
          TOTAL_FAILURES=$((ANDROID_FAILURES + IOS_FAILURES + DEVICE_FARM_FAILURES + COMPLIANCE_FAILURES))
          
          echo "### Android: $ANDROID_FAILURES failures" >> mobile-testing-summary.md
          echo "### iOS: $IOS_FAILURES failures" >> mobile-testing-summary.md
          echo "### Device Farm: $DEVICE_FARM_FAILURES failures" >> mobile-testing-summary.md
          echo "### Compliance: $COMPLIANCE_FAILURES issues" >> mobile-testing-summary.md
          
          if [ "$TOTAL_FAILURES" -gt 0 ]; then
            echo "## ðŸš¨ MOBILE TESTING REGRESSIONS DETECTED" >> mobile-testing-summary.md
            echo "Found $TOTAL_FAILURES failing tests across all mobile platforms." >> mobile-testing-summary.md
            exit 1
          else
            echo "## âœ… All Mobile Tests Passed" >> mobile-testing-summary.md
            echo "All mobile platform tests passed successfully across Android, iOS, and device farms." >> mobile-testing-summary.md
          fi

      - name: Upload Summary Report
        uses: actions/upload-artifact@v4
        with:
          name: mobile-testing-summary-report
          path: mobile-testing-summary.md
          retention-days: 90

      - name: Mobile Testing Success Notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "ðŸ“± *Mobile Platform Testing PASSED*\n\nAll Android and iOS tests completed successfully across multiple devices, API levels, and compliance checks.\n\nDetailed reports available in artifacts for all platforms."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Mobile Testing Failure Notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "ðŸ“± *Mobile Platform Testing FAILED*\n\nFound $TOTAL_FAILURES failing tests across Android, iOS, device farms, and compliance checks.\n\nReview the summary report and individual platform reports in artifacts."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  mobile-badge-update:
    name: Update Mobile Testing Badges
    runs-on: ubuntu-latest
    needs: mobile-summary
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README Badges
        run: |
          # Add mobile testing badges to README
          if ! grep -q "Mobile Testing" README.md; then
            sed -i '/## Badges/i\
ðŸ“± Android Tests: ![Android Tests](https://github.com/REChainVC/rechain-vc/workflows/Android%20Testing/badge.svg)\
ðŸ“± iOS Tests: ![iOS Tests](https://github.com/REChainVC/rechain-vc/workflows/iOS%20Testing/badge.svg)\
ðŸ“± Device Farm: ![Device Farm](https://github.com/REChainVC/rechain-vc/workflows/Device%20Farm%20Testing/badge.svg)' README.md
          fi
          
          # Update badge status
          if [ -f mobile-testing-summary.md ]; then
            if grep -q "All Mobile Tests Passed" mobile-testing-summary.md; then
              STATUS="success"
            else
              STATUS="failure"
            fi
          else
            STATUS="skipped"
          fi
          
          # Commit changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update mobile testing badges [skip ci]" || exit 0
          git push